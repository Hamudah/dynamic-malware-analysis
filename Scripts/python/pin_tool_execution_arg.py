import subprocess
import os
import time
import shutil
import csv
import ftplib
import sys

def disable_windows_defender():
    # Disable Windows Defender Real-time Protection
    disable_realtime_protection_cmd = r'reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows Defender\Real-Time Protection" /v DisableRealtimeMonitoring /t REG_DWORD /d 1 /f'
    subprocess.run(["powershell.exe", "-Command", disable_realtime_protection_cmd], check=True)

    # Disable Windows Defender AntiSpyware
    disable_defender_cmd = r'reg add "HKLM\SOFTWARE\Policies\Microsoft\Windows Defender" /v DisableAntiSpyware /t REG_DWORD /d 1 /f'
    subprocess.run(["powershell.exe", "-Command", disable_defender_cmd], check=True)

    # Stop Windows Defender services
    stop_defender_services = [
        "Set-Service -Name WinDefend -StartupType Disabled",
        "Stop-Service -Name WinDefend",
        "Set-Service -Name WdNisSvc -StartupType Disabled",
        "Stop-Service -Name WdNisSvc",
        "Set-Service -Name WdBoot -StartupType Disabled",
        "Stop-Service -Name WdBoot",
    ]
    for cmd in stop_defender_services:
        cmd = f'Start-Process powershell.exe -ArgumentList "{cmd}" -Verb RunAs'
        subprocess.run(["powershell.exe", "-Command", cmd], check=True)

def stop_fakenet():
    global fakenet_process
    if fakenet_process:
        fakenet_process.terminate()

def run_fakenet(fakenet_path):
    global fakenet_process
    with open(os.devnull, 'w') as devnull:
        fakenet_process = subprocess.Popen(["powershell.exe", "-Command", fakenet_path, "-Verb", "runAs"], stdout=devnull, stderr=devnull)


def execute_pin_command(software_name, command):
    pin_tool_dir = r'C:\Users\hamud\Desktop\pin-3.18-98332-gaebd7b1e6-msvc-windows\source\tools\MyPinTool'
    vcvarsall_path = r'C:\Program Files\Microsoft Visual Studio\2019\Community\VC\Auxiliary\Build\vcvarsall.bat'
    vcvarsall_cmd = f'"{vcvarsall_path}" x86 > nul && '
    pin_cmd = f'{vcvarsall_cmd} ..\..\..\pin -t obj-ia32/MyPinTool.dll -tsc 1 -os test.csv -to 40 -- {command}'

    output_dir = os.path.join(os.getcwd(), 'Windows System Call API', 'Goodware')
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    original_dir = os.getcwd()
    os.chdir(pin_tool_dir)

    with open(os.devnull, 'w') as devnull:
        subprocess.run(pin_cmd, shell=True, stderr=devnull, stdout=devnull)

    os.chdir(original_dir)

    test_csv_path = os.path.join(pin_tool_dir, 'test.csv')
    if os.path.exists(test_csv_path):
        output_file = os.path.join(output_dir, f'{software_name}.csv')
        test_csv_size = os.path.getsize(test_csv_path)

        if os.path.exists(output_file):
            output_file_size = os.path.getsize(output_file)
            if test_csv_size > output_file_size:
                print(f'New output file for {software_name} is larger. Replacing existing file.')
                shutil.move(test_csv_path, output_file)
            else:
                print(f'Existing output file for {software_name} is larger. Keeping existing file.')
                os.remove(test_csv_path)
        else:
            shutil.move(test_csv_path, output_file)
    else:
        print(f"Error: 'test.csv' not generated for {software_name}. Check your pin command and the software command.")

    # Remove the test.csv file after processing
    test_csv_path = os.path.join(pin_tool_dir, 'test.csv')
    if os.path.exists(test_csv_path):
        os.remove(test_csv_path)

def send_file_via_ftp(filename):
    ftp = ftplib.FTP("192.178.162.1")
    ftp.login(user="ftpuser", passwd="ftpuser")
    ftp.cwd("upload")
    base_filename = os.path.basename(filename)
    with open(filename, "rb") as f:
        ftp.storbinary(f'STOR {base_filename}', f)
    ftp.quit()

def main():
    if len(sys.argv) < 2:
        print("Usage: python script.py <line_number>")
        sys.exit(1)

    try:
        line_number = int(sys.argv[1])
    except ValueError:
        print("Error: line_number must be an integer")
        sys.exit(1)

    goodware_list_file = r'C:\Users\hamud\Desktop\dynamic-malware-analysis-main\config_files\malware_list.csv'

    # Read the goodware list
    with open(goodware_list_file, 'r') as f:
        reader = csv.reader(f)
        next(reader)  # Skip the header row

        for index, row in enumerate(reader, start=1):
            if not row or index != line_number:
                continue

            software_name, *command_args = row
            command = ' '.join([arg.strip('\"') for arg in command_args if arg])
            print(f'Running for {software_name}...')
            execute_pin_command(software_name, command)
            print(f'Completed for {software_name}')

            # Send the output file via FTP if the new output file was saved
            output_filename = os.path.join(os.getcwd(), 'Windows System Call API', 'Goodware', f"{software_name}.csv")
            if os.path.exists(output_filename):
                send_file_via_ftp(output_filename)

            time.sleep(1)
            break

    sys.exit(0)  # Add this line to exit the script after sending the file via FTP

if __name__ == '__main__':
    disable_windows_defender()
    fakenet_path = r'C:\Users\hamud\Desktop\Fakenet1.0b\FakeNet'
    run_fakenet(fakenet_path)
    try:
        main()
    finally:
        stop_fakenet()