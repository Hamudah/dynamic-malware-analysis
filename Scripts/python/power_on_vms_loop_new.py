import sys
import time
import virtualbox
from virtualbox.library import LockType, MachineState, SessionState


def close_existing_sessions(machine, session):
    machine.lock_machine(session, LockType.shared)
    if session.state == SessionState.locked:
        session.unlock_machine()


def main(num_files):
    vbox = virtualbox.VirtualBox()
    windows_machine = vbox.find_machine("WindowsMalware32bit")
    ubuntu_machine = vbox.find_machine("FTP_SERVER2")

    ubuntu_session = virtualbox.Session()
    close_existing_sessions(ubuntu_machine, ubuntu_session)
    print("Closed existing sessions on Ubuntu machine")

    ubuntu_machine.launch_vm_process(ubuntu_session, "gui", [])
    print("Started Ubuntu virtual machine")
    time.sleep(5)

    for i in range(num_files):
        windows_session = virtualbox.Session()
        close_existing_sessions(windows_machine, windows_session)
        print("Closed existing sessions on Windows machine")
        time.sleep(3)

        windows_machine.launch_vm_process(windows_session, "gui", [])
        print("Started Windows virtual machine")
        time.sleep(60)

        argument = str(i)
        print(f"Running the Script! Wait for it to finish!")
        guest_session = ubuntu_session.console.guest.create_session("hamud", "hamud", "", "")
        process, stdout, stderr = guest_session.execute("/bin/bash", [
            "/home/hamud/Schreibtisch/BA/dynamic-malware-analysis-main/Scripts/shell/execute_pintool.sh",
            argument
        ])
        process.wait_for_array([virtualbox.library.ProcessStatus.terminated], -1)
        print(f"Executed the Script {i + 1} times!")
        print(f"Stuck")
        #Stuck here
        print(f"Stuck")
        print(stdout.decode())
        print("Before shutting down the machine")
        print("Executing shutdown command...")
        process, stdout, stderr = guest_session.execute("/bin/bash", [
            "-c", "ssh -oStrictHostKeyChecking=no hamud@192.178.162.2 'shutdown /s /f /t 0'"
        ])
        print("Shutdown command executed. stdout:", stdout.decode(), "stderr:", stderr.decode())

        
        while windows_machine.state != MachineState.powered_off:
            print("Current state:", windows_machine.state)
            time.sleep(5)

        if windows_session.state == SessionState.locked:
            windows_session.unlock_machine()

        windows_machine.lock_machine(windows_session, LockType.shared)
        print("Start restoring Snapshot from the Windows machine")
        snapshot = windows_machine.find_snapshot("Before Hardening")
        progress = windows_session.machine.restore_snapshot(snapshot)
        progress.wait_for_completion()
        windows_session.unlock_machine()
        print("Windows machine restored to snapshot")


if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python power_on_vms_loop.py <num_files>")
        sys.exit(1)

    num_files = int(sys.argv[1])
    main(num_files)
